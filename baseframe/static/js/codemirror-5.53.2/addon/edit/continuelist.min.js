(function (e) {
  'object' == typeof exports && 'object' == typeof module
    ? e(require('../../lib/codemirror'))
    : 'function' == typeof define && define.amd
    ? define(['../../lib/codemirror'], e)
    : e(CodeMirror);
})(function (e) {
  'use strict';
  function n(e, n) {
    var i = n.line,
      r = 0,
      l = 0,
      o = t.exec(e.getLine(i)),
      s = o[1];
    do {
      r += 1;
      var a = i + r,
        c = e.getLine(a),
        d = t.exec(c);
      if (d) {
        var f = d[1],
          u = parseInt(o[3], 10) + r - l,
          p = parseInt(d[3], 10),
          g = p;
        if (s !== f || isNaN(p)) {
          if (s.length > f.length) return;
          if (s.length < f.length && 1 === r) return;
          l += 1;
        } else
          u === p && (g = p + 1),
            u > p && (g = u + 1),
            e.replaceRange(
              c.replace(t, f + g + d[4] + d[5]),
              { line: a, ch: 0 },
              { line: a, ch: c.length }
            );
      }
    } while (d);
  }
  var t = /^(\s*)(>[> ]*|[*+-] \[[x ]\]\s|[*+-]\s|(\d+)([.)]))(\s*)/,
    i = /^(\s*)(>[> ]*|[*+-] \[[x ]\]|[*+-]|(\d+)[.)])(\s*)$/,
    r = /[*+-]\s/;
  e.commands.newlineAndIndentContinueMarkdownList = function (l) {
    if (l.getOption('disableInput')) return e.Pass;
    for (var o = l.listSelections(), s = [], a = 0; a < o.length; a++) {
      var c = o[a].head,
        d = l.getStateAfter(c.line),
        f = e.innerMode(l.getMode(), d);
      if ('markdown' !== f.mode.name)
        return void l.execCommand('newlineAndIndent');
      d = f.state;
      var u = !1 !== d.list,
        p = 0 !== d.quote,
        g = l.getLine(c.line),
        h = t.exec(g),
        m = /^\s*$/.test(g.slice(0, c.ch));
      if (!o[a].empty() || (!u && !p) || !h || m)
        return void l.execCommand('newlineAndIndent');
      if (i.test(g)) {
        var v = p && />\s*$/.test(g),
          x = !/>\s*$/.test(g);
        (v || x) &&
          l.replaceRange(
            '',
            { line: c.line, ch: 0 },
            { line: c.line, ch: c.ch + 1 }
          ),
          (s[a] = '\n');
      } else {
        var I = h[1],
          w = h[5],
          b = !(r.test(h[2]) || h[2].indexOf('>') >= 0),
          y = b ? parseInt(h[3], 10) + 1 + h[4] : h[2].replace('x', ' ');
        (s[a] = '\n' + I + y + w), b && n(l, c);
      }
    }
    l.replaceSelections(s);
  };
});
