# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[build-system]
requires = ['setuptools>=61', 'setuptools_scm[toml]']
build-backend = 'setuptools.build_meta'

[project]
name = 'baseframe'
description = 'Baseframe for Hasgeek projects'
readme = 'README.rst'
requires-python = '>=3.7'
keywords = ['baseframe', 'flask', 'framework', 'web']
license = {file = 'LICENSE.txt'}
dynamic = ['version']
maintainers = [
  {name = 'Hasgeek', email = 'info@hasgeek.com'},
]
authors = [
  {name = 'Kiran Jonnalagadda'}
]
urls = {repository = 'https://github.com/hasgeek/baseframe'}
classifiers = [
  'Programming Language :: Python',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.7',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'License :: OSI Approved :: BSD License',
  'Operating System :: OS Independent',
  'Intended Audience :: Developers',
  'Development Status :: 5 - Production/Stable',
  'Topic :: Software Development :: Libraries',
]
dependencies = [
  'bleach',
  'coaster',
  'cssmin',
  'dnspython',
  'emoji>=1.0.0',
  'Flask-Assets',
  'Flask-Babel>=2.0.0',
  'Flask-Caching',
  'Flask-WTF>=0.14',
  'Flask>=2.0',
  'furl',
  'grapheme>=0.6.0',
  'html5lib>=1.0.1',
  'markupsafe',
  'mxsniff',
  'ndg-httpsclient',
  'pyasn1',
  'pycountry',
  'pyIsEmail',
  'pyOpenSSL',
  'python-dateutil',
  'pytz',
  'redis',
  'requests-mock>=1.9.3',
  'requests',
  'rq',
  'semantic_version',
  'sentry-sdk',
  'statsd',
  'typing_extensions',
  'werkzeug',
  'WTForms-SQLAlchemy',
  'WTForms>=3.0',

]

[tool.setuptools.dynamic]
version = {attr = 'baseframe._version.__version__'}

[tool.setuptools.packages.find]
where = ['src']

[tool.black]
line-length = 88
target_version = ['py37']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | src/baseframe/static
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
from_first = true
known_future_library = ['__future__']
known_first_party = ['baseframe', 'coaster', 'flask_lastuser']
known_sqlalchemy = [
  'alembic',
  'sqlalchemy',
  'sqlalchemy_utils',
  'flask_sqlalchemy',
  'psycopg2'
]
known_flask = [
  'flask',
  'werkzeug',
  'markupsafe',
  'itsdangerous',
  'wtforms',
  'wtforms_sqlalchemy',
  'webassets',
  'flask_assets',
  'flask_babel',
  'flask_flatpages',
  'flask_mail',
  'flask_migrate',
  'flask_rq2',
  'flask_wtf',
  ]
default_section = 'THIRDPARTY'
sections = [
  'FUTURE',
  'STDLIB',
  'SQLALCHEMY',
  'FLASK',
  'THIRDPARTY',
  'FIRSTPARTY',
  'LOCALFOLDER'
]

[tool.mypy]
files = '**/*.py'
exclude = 'node_modules'
plugins = ['sqlmypy']
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = false
check_untyped_defs = false

[tool.pytest.ini_options]
pythonpath = 'src'
minversion = '6.0'
addopts = '--doctest-modules --ignore setup.py --cov-report=term-missing'
doctest_optionflags = ['ALLOW_UNICODE', 'ALLOW_BYTES']
filterwarnings = ['ignore::DeprecationWarning', 'ignore::UserWarning']

[tool.pylint.master]
load-plugins = ['pylint_pytest', 'pylint_flask_sqlalchemy']
# max-parents = 10
init-hook = '''
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.insert(0, str(path / 'src'))
'''

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'cyclic-import',  # We have tail imports all over
  'fixme',  # Our workflow is to tag for future fixes
  'invalid-name',  # Flake8 covers our naming convention requirements
  'missing-class-docstring',  # Backlog
  'missing-function-docstring',  # Backlog
  'no-member',  # Pylint doesn't understand mixins referring to main class members
  'redefined-builtin',  # Covered by Flake8 already
  'too-few-public-methods',  # Data classes and validator classes have few methods
  'too-many-arguments',
  'too-many-branches',
  'too-many-locals',
  'too-many-instance-attributes',  # Some instances are just bags of attributes
  'too-many-lines',
  'too-many-nested-blocks',
  'too-many-return-statements',
  'too-many-statements',
  'unused-argument',  # Arguments required for spec compatibility aren't always used
  'wrong-import-position',  # Imports after code are sometimes required
  'wrong-import-order',  # Let black and isort handle this
]

[tool.bandit]
exclude_dirs = ['node_modules']

[tool.bandit.assert_used]
skips = ['*/*_test.py', '*/test_*.py']
